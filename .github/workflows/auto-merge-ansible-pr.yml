name: Auto-merge Ansible PRs
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  auto-merge:
    runs-on: self-hosted
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Auto-merge PRs from Ansible service account (jira-* branches)
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.info("No PR object found.");
              return;
            }

            const serviceLogin = "splunk-ansible-bot"; // üëà your service account username
            const sourceBranch = pr.head.ref;
            const targetBranch = pr.base.ref;

            // Regex pattern for allowed feature branches: jira-XXXX-something
            const jiraPattern = /^jira-\d+-/i;

            core.info(`Evaluating PR #${pr.number} from branch: ${sourceBranch} -> ${targetBranch}`);

            // Check: source branch matches jira-* and base is main
            if (!jiraPattern.test(sourceBranch) || targetBranch !== "main") {
              core.info(`Skipping: Branch '${sourceBranch}' does not match pattern or target is not 'main'.`);
              return;
            }

            // Check: PR author is the Ansible bot account
            if (pr.user && pr.user.login === serviceLogin) {
              core.info(`‚úÖ Matches pattern and service account (${serviceLogin}). Proceeding with merge...`);
              
              // Merge the PR
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: "squash"
              });

              core.info(`‚úÖ Successfully merged PR #${pr.number}`);

              // Delete branch after merge (if not from a fork)
              if (!pr.head.repo.fork) {
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${sourceBranch}`,
                  });
                  core.info(`üßπ Deleted branch ${sourceBranch}`);
                } catch (error) {
                  core.warning(`‚ö†Ô∏è Could not delete branch ${sourceBranch}: ${error.message}`);
                }
              } else {
                core.info("PR came from a fork; skipping branch deletion.");
              }

            } else {
              core.info(`Skipping: PR author is not ${serviceLogin}`);
            }
